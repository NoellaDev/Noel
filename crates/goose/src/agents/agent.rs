use anyhow::Result;
use async_trait::async_trait;
use futures::stream::BoxStream;
use serde_json::Value;

use super::system::{SystemConfig, SystemResult};
use crate::message::Message;
use crate::providers::base::ProviderUsage;

/// Core trait defining the behavior of an Agent
#[async_trait]
pub trait Agent: Send + Sync {
    /// Create a stream that yields each message as it's generated by the agent
    async fn reply(&self, messages: &[Message]) -> Result<BoxStream<'_, Result<Message>>>;

    /// Add a new MCP client to the agent
    async fn add_system(&mut self, config: SystemConfig) -> SystemResult<()>;

    /// Remove a system by name
    async fn remove_system(&mut self, name: &str);

    /// List all systems
    // TODO this needs to also include status so we can tell if systems are dropped
    async fn list_systems(&self) -> Vec<String>;

    /// Pass through a JSON-RPC request to a specific system
    async fn passthrough(&self, system: &str, method: &str, params: Value) -> SystemResult<Value>;

    /// Get the total usage of the agent
    async fn usage(&self) -> Vec<ProviderUsage>;
}
