on:
  push:
    tags:
      - "v1.*"
  pull_request:
    branches:
      - v1.0
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

name: Release CLI

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.architecture }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 build on Ubuntu
          - os: ubuntu-latest
            architecture: x86_64
            suffix: unknown-linux-gnu

          # TODO: Linux aarch64 (ARM64) build on Ubuntu via cross-compilation - probably use `cross-rs`

          # macOS x86_64 build
          - os: macos-latest
            architecture: x86_64
            suffix: apple-darwin

          # macOS ARM64 build
          - os: macos-latest
            architecture: aarch64
            suffix: apple-darwin

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Rust toolchain
      # This will install the specified target as per matrix
      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.architecture }}-${{ matrix.suffix }}

      # Step 3: Install dependencies for macOS ARM64 builds
      - name: Install dependencies for macOS ARM64
        if: matrix.os == 'macos-latest' && matrix.architecture == 'aarch64'
        run: |
          brew install llvm
          rustup target add aarch64-apple-darwin
          echo "export PATH=$(brew --prefix llvm)/bin:\$PATH" >> $GITHUB_ENV

      # Step 4: Install Libs for Ubuntu (x86_64 and aarch64)
      - name: Install Libs for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update -y
          sudo apt install -y libdbus-1-dev gnome-keyring libxcb1-dev
          gnome-keyring-daemon --components=secrets --daemonize --unlock <<< 'foobar'

      # Step 5: Set up certificates for macOS builds
      - name: Add MacOS certs for signing
        if: matrix.os == 'macos-latest'
        run: |
          # Create the script in a temp location
          cat << 'EOF' > /tmp/add-macos-cert.sh
          #!/usr/bin/env sh

          KEY_CHAIN=build.keychain
          CERTIFICATE_P12=certificate.p12

          # Recreate the certificate from the secure environment variable
          echo $CERTIFICATE_OSX_APPLICATION | base64 --decode > $CERTIFICATE_P12

          #create a keychain
          security create-keychain -p actions $KEY_CHAIN

          # Make the keychain the default so identities are found
          security default-keychain -s $KEY_CHAIN

          # Unlock the keychain
          security unlock-keychain -p actions $KEY_CHAIN

          security import $CERTIFICATE_P12 -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign;

          security set-key-partition-list -S apple-tool:,apple: -s -k actions $KEY_CHAIN

          # remove certs
          rm -fr *.p12
          EOF

          chmod +x /tmp/add-macos-cert.sh
          /tmp/add-macos-cert.sh
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      # Step 6: Build the project
      - name: Build
        run: |
          export TARGET=${{ matrix.architecture }}-${{ matrix.suffix }}
          cargo build --release --target $TARGET
          
          # For macOS builds, sign the binary
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cd target/${TARGET}/release
            codesign --force -s "Developer ID Application" --options runtime goose
            # Create a ZIP archive
            ditto -c -k --keepParent goose goose-${TARGET}.zip
            # Notarize the ZIP
            xcrun notarytool submit goose-${TARGET}.zip --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --wait
            echo "ARTIFACT=target/${TARGET}/release/goose-${TARGET}.zip" >> $GITHUB_ENV
          else
            cd target/${TARGET}/release
            zip -j goose-${TARGET}.zip goose
            echo "ARTIFACT=target/${TARGET}/release/goose-${TARGET}.zip" >> $GITHUB_ENV
          fi

      # Step 7: Upload artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: goose-${{ matrix.architecture }}-${{ matrix.suffix }}
          path: ${{ env.ARTIFACT }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write
    if: github.event_name != 'pull_request'
    steps:
      # Step 1: Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      # Step 2: Create GitHub release with artifacts
      - name: Create/Update GitHub release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "goose-*.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          omitBody: true
          omitPrereleaseDuringUpdate: true

  pr-comment:
    name: Add PR Comment
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      pull-requests: write
    if: github.event_name == 'pull_request'
    steps:
      # Step 1: Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      # Step 2: Create comment with download links
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Build artifacts for this PR

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### CLI Binaries for this PR
            
            The following binaries are available for testing:
            
            - [ðŸ“¦ macOS ARM64 (M1/M2, signed)](https://nightly.link/${{ github.repository }}/actions/runs/${{ github.run_id }}/goose-aarch64-apple-darwin.zip)
            - [ðŸ“¦ macOS x86_64 (Intel, signed)](https://nightly.link/${{ github.repository }}/actions/runs/${{ github.run_id }}/goose-x86_64-apple-darwin.zip)
            - [ðŸ“¦ Linux x86_64](https://nightly.link/${{ github.repository }}/actions/runs/${{ github.run_id }}/goose-x86_64-unknown-linux-gnu.zip)

            Each archive contains the `goose` CLI binary. The macOS binaries are signed and notarized.
            
            These links are provided by nightly.link and will work even if you're not logged into GitHub.
          edit-mode: replace