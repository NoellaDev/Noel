name: Make preview Desktop App for PR

on:
  pull_request:
    branches:
      - v1.0
  workflow_dispatch:
  issue_comment:
    types:
      - created    

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preview-app:
    runs-on: macos-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read 
      
            

    steps:
      
      
    - name: Check if comment contains trigger keyword
      id: comment-check
      if: github.event_name == 'issue_comment' && github.event.comment.body != null
      run: |
        echo "Checking comment: '${{ github.event.comment.body }}'"
        if [[ "${{ github.event.comment.body }}" == *"[Build Preview]"* ]]; then
          echo "trigger_build=true" >> $GITHUB_ENV
        else
          echo "trigger_build=false" >> $GITHUB_ENV
      shell: bash

    - name: Skip workflow if not triggered by keyword
      if: env.trigger_build == 'false'
      run: echo "No trigger keyword found. Skipping build."      


    - name: Checkout repository
      if: env.trigger_build == 'true'
      uses: actions/checkout@v4

    - name: Set up Rust
      if: env.trigger_build == 'true'
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable

    - name: Cache Cargo registry
      if: env.trigger_build == 'true'
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache Cargo index
      if: env.trigger_build == 'true'
      uses: actions/cache@v3
      with:
        path: ~/.cargo/index
        key: ${{ runner.os }}-cargo-index
        restore-keys: |
          ${{ runner.os }}-cargo-index

    - name: Cache Cargo build
      if: env.trigger_build == 'true'
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-

    # Build Rust Binary
    - name: Build Release Binary
      if: env.trigger_build == 'true'
      run: cargo build --release

    - name: copy binary
      if: env.trigger_build == 'true'
      run: cp target/release/goosed ui/desktop/src/bin/goosed

    # Desktop App Steps
    - name: Add MacOS certs for signing and notarization
      if: env.trigger_build == 'true'
      run: ./add-macos-cert.sh
      working-directory: ui/desktop
      env:
        CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

    - name: Set up Node.js
      if: env.trigger_build == 'true'
      uses: actions/setup-node@v2
      with:
        node-version: 'lts/*'

    - name: Install dependencies
      if: env.trigger_build == 'true'
      run: npm ci
      working-directory: ui/desktop

    - name: Make default Goose App
      if: env.trigger_build == 'true'
      run: |
        attempt=0
        max_attempts=2
        until [ $attempt -ge $max_attempts ]; do
          npm run bundle:default && break
          attempt=$((attempt + 1))
          echo "Attempt $attempt failed. Retrying..."
          sleep 5
        done
        if [ $attempt -ge $max_attempts ]; then
          echo "Action failed after $max_attempts attempts."
          exit 1
        fi
      working-directory: ui/desktop
      env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    - name: Upload artifact
      if: env.trigger_build == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: Goose-darwin-arm64
        path: ui/desktop/out/Goose-darwin-arm64/Goose.zip


      
    
    
    # Download all artifacts
    - name: Download all artifacts
      if: env.trigger_build == 'true'
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    # Create comment with download links
    - name: Find Comment
      if: env.trigger_build == 'true'
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Desktop App build artifacts

    - name: Create or update comment
      if: env.trigger_build == 'true'
      uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ### Desktop App for this PR
          
          The following build is available for testing:
          
          - [ðŸ“± macOS Desktop App (Universal, signed)](https://nightly.link/${{ github.repository }}/actions/runs/${{ github.run_id }}/Goose-darwin-arm64.zip)

          The app is signed and notarized for macOS. After downloading, unzip the file and drag the Goose.app to your Applications folder.
          
          This link is provided by nightly.link and will work even if you're not logged into GitHub.
        edit-mode: replace