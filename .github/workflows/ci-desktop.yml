name: Desktop App CI

on:
  push:
    branches:
      - v1.0
  pull_request:
    branches:
      - v1.0

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache Cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/index
        key: ${{ runner.os }}-cargo-index
        restore-keys: |
          ${{ runner.os }}-cargo-index

    - name: Cache Cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-

    # Build Rust Binary
    - name: Build Release Binary
      run: cargo build --release

    - name: copy binary
      run: cp target/release/goosed ui/desktop/src/bin/goosed

    - name: Test goosed agent directly
      run: |
        # Make sure the binary is there
        ls -la ui/desktop/src/bin/goosed

        # Set any environment variables goosed might need
        export GOOSE_SERVER__PORT=3000
        export GOOSE_SERVER__SECRET_KEY="mysecret"
        export GOOSE_PROVIDER__TYPE="databricks"
        export GOOSE_PROVIDER__HOST="http://ignore"
        export GOOSE_PROVIDER__MODEL="ignore"        

        # Run goosed with the "agent" subcommand
        ui/desktop/src/bin/goosed agent
        echo "goosed agent exited with code $?"      

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 'lts/*'

    - name: Install dependencies
      run: npm ci
      working-directory: ui/desktop

    - name: Run Lint check
      run: npm run lint:check
      working-directory: ui/desktop


    - name: Run E2E tests
      run: npm run test-e2e
      working-directory: ui/desktop
